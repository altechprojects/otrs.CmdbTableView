<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>CmdbTableView</Name>
    <Version>6.0.1</Version>
    <Vendor>Complemento [Free]</Vendor>
    <URL>http://www.complemento.net.br/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 2, June 1991</License>
    <Description Lang="en">Clean OTRS View Zoom</Description>
    <Framework>6.0.x</Framework>
    <BuildDate>2018-03-20 13:39:51</BuildDate>
    <BuildHost>localhost.localdomain.localdomain</BuildHost>
    <Filelist>
        <File Location="Custom/CmdbTableView.sopm" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX3BhY2thZ2UgdmVyc2lvbj0iMS4wIj4KICAgIDxOYW1lPkNtZGJUYWJsZVZpZXc8L05hbWU+CiAgICA8VmVyc2lvbj42LjAuMTwvVmVyc2lvbj4KICAgIDxGcmFtZXdvcms+Ni4wLng8L0ZyYW1ld29yaz4KICAgIDxWZW5kb3I+Q29tcGxlbWVudG8gW0ZyZWVdPC9WZW5kb3I+CiAgICA8VVJMPmh0dHA6Ly93d3cuY29tcGxlbWVudG8ubmV0LmJyLzwvVVJMPgogICAgPExpY2Vuc2U+R05VIEdFTkVSQUwgUFVCTElDIExJQ0VOU0UgVmVyc2lvbiAyLCBKdW5lIDE5OTE8L0xpY2Vuc2U+CiAgICA8RGVzY3JpcHRpb24gTGFuZz0iZW4iPkNsZWFuIE9UUlMgVmlldyBab29tPC9EZXNjcmlwdGlvbj4KICAgIDxGaWxlbGlzdD4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vQ21kYlRhYmxlVmlldy5zb3BtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iS2VybmVsL091dHB1dC9IVE1ML1RlbXBsYXRlcy9TdGFuZGFyZC9BZ2VudElUU01Db25maWdJdGVtT3ZlcnZpZXdUYWJsZS50dCI+PC9GaWxlPgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249Iktlcm5lbC9Db25maWcvRmlsZXMvWE1ML0NvbXBsZW1lbnRvQ21kYlRhYmxlVmlldy54bWwiPjwvRmlsZT4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJLZXJuZWwvT3V0cHV0L0hUTUwvSVRTTUNvbmZpZ0l0ZW0vT3ZlcnZpZXdUYWJsZS5wbSI+PC9GaWxlPgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249Iktlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNvbmZpZ0l0ZW1BamF4VXBkYXRlLnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0idmFyL2h0dHBkL2h0ZG9jcy9qcy90aGlyZHBhcnR5L3RhYmxlZWRpdC9qcXVlcnkudGFibGVkaXQubWluLmpzIj48L0ZpbGU+CiAgICA8L0ZpbGVsaXN0Pgo8L290cnNfcGFja2FnZT4K</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentITSMConfigItemOverviewTable.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Config/Files/XML/ComplementoCmdbTableView.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIyLjAiIGluaXQ9IkNvbmZpZyI+CiAgICA8U2V0dGluZyBOYW1lPSJGcm9udGVuZDo6TW9kdWxlIyMjQWdlbnRJVFNNQ29uZmlnSXRlbUFqYXhVcGRhdGUiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RnJvbnRlbmQgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIGFnZW50IGludGVyZmFjZS48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxOYXZpZ2F0aW9uPkZyb250ZW5kOjpBZ2VudDo6TW9kdWxlUmVnaXN0cmF0aW9uPC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEl0ZW0gVmFsdWVUeXBlPSJGcm9udGVuZFJlZ2lzdHJhdGlvbiI+CiAgICAgICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ikdyb3VwUm8iPgogICAgICAgICAgICAgICAgICAgICAgICA8QXJyYXk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQXJyYXk+CiAgICAgICAgICAgICAgICAgICAgPC9JdGVtPgogICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iR3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8QXJyYXk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SXRlbT5pdHNtLWNvbmZpZ2l0ZW08L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQXJyYXk+CiAgICAgICAgICAgICAgICAgICAgPC9JdGVtPgogICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iRGVzY3JpcHRpb24iPkNvbmZpZyBJdGVtIEFqYXggVXBkYXRlPC9JdGVtPgogICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iVGl0bGUiPkFqYXggVXBkYXRlPC9JdGVtPgogICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTmF2QmFyTmFtZSI+Q29uZmlnIEl0ZW08L0l0ZW0+CiAgICAgICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgICAgIDwvSXRlbT4KICAgICAgICA8L1ZhbHVlPgogICAgPC9TZXR0aW5nPgogICAgPFNldHRpbmcgTmFtZT0iRnJvbnRlbmQ6Ok5hdmlnYXRpb24jIyNBZ2VudElUU01Db25maWdJdGVtQWpheFVwZGF0ZSMjIzAwMy1Db21wbGVtZW50b0NtZGJUYWJsZVZpZXciIFJlcXVpcmVkPSIwIiBWYWxpZD0iMCI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+TWFpbiBtZW51IGl0ZW0gcmVnaXN0cmF0aW9uLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPE5hdmlnYXRpb24+RnJvbnRlbmQ6OkFnZW50OjpNb2R1bGVSZWdpc3RyYXRpb246Ok1haW5NZW51PC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEFycmF5PgogICAgICAgICAgICAgICAgPERlZmF1bHRJdGVtIFZhbHVlVHlwZT0iRnJvbnRlbmROYXZpZ2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgICAgICAgICA8L0RlZmF1bHRJdGVtPgogICAgICAgICAgICA8L0FycmF5PgogICAgICAgIDwvVmFsdWU+CiAgICA8L1NldHRpbmc+CiAKICAgIDxTZXR0aW5nIE5hbWU9IkxvYWRlcjo6QWdlbnQ6OkNvbW1vbkpTIyMjMjM1LVRhYmxlRWRpdCIgUmVxdWlyZWQ9IjEiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5MaXN0IG9mIEpTIGZpbGVzIHRvIGFsd2F5cyBiZSBsb2FkZWQgZm9yIHRoZSBhZ2VudCBpbnRlcmZhY2UuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8TmF2aWdhdGlvbj5Gcm9udGVuZDo6QmFzZTwvTmF2aWdhdGlvbj4KICAgICAgICA8VmFsdWU+CiAgICAgICAgICAgIDxBcnJheT4KICAgICAgICAgICAgICAgIDxJdGVtPnRoaXJkcGFydHkvdGFibGVlZGl0L2pxdWVyeS50YWJsZWRpdC5taW4uanM8L0l0ZW0+CiAgICAgICAgICAgIDwvQXJyYXk+CiAgICAgICAgPC9WYWx1ZT4KICAgIDwvU2V0dGluZz4KICAgIDxTZXR0aW5nIE5hbWU9IlByZWZlcmVuY2VzR3JvdXBzIyMjQ29uZmlnSXRlbU92ZXJ2aWV3VGFibGVQYWdlU2hvd24iIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+UGFyYW1ldGVycyBmb3IgdGhlIHBhZ2VzIChpbiB3aGljaCB0aGUgY29uZmlndXJhdGlvbiBpdGVtcyBhcmUgc2hvd24pLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPE5hdmlnYXRpb24+RnJvbnRlbmQ6OkFnZW50OjpWaWV3OjpQcmVmZXJlbmNlczwvTmF2aWdhdGlvbj4KICAgICAgICA8VmFsdWU+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJNb2R1bGUiPktlcm5lbDo6T3V0cHV0OjpIVE1MOjpQcmVmZXJlbmNlczo6R2VuZXJpYzwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUHJlZmVyZW5jZUdyb3VwIj5PdGhlciBTZXR0aW5nczwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTGFiZWwiIFRyYW5zbGF0YWJsZT0iMSI+Q29uZmlndXJhdGlvbiBJdGVtIExpbWl0PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJLZXkiIFRyYW5zbGF0YWJsZT0iMSI+Q29uZmlndXJhdGlvbiBJdGVtIGxpbWl0IHBlciBwYWdlPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEYXRhIj4KICAgICAgICAgICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIxMCI+MDAxMDwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIxNSI+MDAxNTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIyMCI+MDAyMDwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIyNSI+MDAyNTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIzMCI+MDAzMDwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIzNSI+MDAzNTwvSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSIxMDAiPjAxMDA8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iNTAwIj4wNTAwPC9JdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IjEwMDAiPjEwMDA8L0l0ZW0+CiAgICAgICAgICAgICAgICAgICAgPC9IYXNoPgogICAgICAgICAgICAgICAgPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEYXRhU2VsZWN0ZWQiPjEwMDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUHJlZktleSI+VXNlckNvbmZpZ0l0ZW1PdmVydmlld1RhYmxlUGFnZVNob3duPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJQcmlvIj44MDAxPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJBY3RpdmUiPjA8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1ZhbHVlPgogICAgPC9TZXR0aW5nPgogICAgPFNldHRpbmcgTmFtZT0iSVRTTUNvbmZpZ0l0ZW06OkZyb250ZW5kOjpPdmVydmlldyMjI1RhYmxlIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgYW4gb3ZlcnZpZXcgbW9kdWxlIHRvIHNob3cgdGhlIHRhYmxlIHZpZXcgb2YgYSBjb25maWd1cmF0aW9uIGl0ZW0gbGlzdC48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxOYXZpZ2F0aW9uPkZyb250ZW5kOjpBZ2VudDo6SVRTTUNvbmZpZ0l0ZW1PdmVydmlldzwvTmF2aWdhdGlvbj4KICAgICAgICA8VmFsdWU+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJNb2R1bGUiPktlcm5lbDo6T3V0cHV0OjpIVE1MOjpJVFNNQ29uZmlnSXRlbTo6T3ZlcnZpZXdUYWJsZTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTmFtZSI+VGFibGU8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWVTaG9ydCI+VDwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iUGFnZVNob3duIj4xMDA8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1ZhbHVlPgogICAgPC9TZXR0aW5nPgo8L290cnNfY29uZmlnPgo=</File>
        <File Location="Kernel/Output/HTML/ITSMConfigItem/OverviewTable.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemAjaxUpdate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudElUU01Db25maWdJdGVtQWpheFVwZGF0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6VmFyaWFibGVDaGVjayBxdyg6YWxsKTsKCiNvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgbXkgcGFyYW0gb2JqZWN0CiAgICBteSAkUGFyYW1PYmplY3QgCQkgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkQ29uZmlnSXRlbU9iamVjdCAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW0nKTsKICAgIG15ICRHZW5lcmFsQ2F0YWxvZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpHZW5lcmFsQ2F0YWxvZycpOwogICAgbXkgJENvbmZpZ09iamVjdCAgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsKICAgIG15ICRMYXlvdXRPYmplY3QgICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICBteSAkQ29uZmlnSXRlbUlEID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0NvbmZpZ0l0ZW1JRCcgKSB8fCAwOwogICAgbXkgJENoYW5nZWQgICAgICA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdDaGFuZ2VkJyApIAkgfHwgJyc7CiAgICBteSAkTmV3VmFsdWUgICAgID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJENoYW5nZWQgKSAJICAgICB8fCAnJzsKCgkKICAgIGlmICggJFNlbGYtPntTdWJhY3Rpb259IGVxICdlZGl0JyApIHsKICAgICAgICAgICAgbXkgJENvbmZpZ0l0ZW0gPSAkQ29uZmlnSXRlbU9iamVjdC0+VmVyc2lvbkdldCgKICAgICAgICAgICAgICAgIENvbmZpZ0l0ZW1JRCA9PiAkQ29uZmlnSXRlbUlELAogICAgICAgICAgICAgICAgWE1MRGF0YUdldCAgID0+IDEsCiAgICAgICAgICAgICk7CgoJCQlteSAkaGs7CgoJCQlpZigkQ2hhbmdlZCA9fiAvOjovICl7CgkJCQlteSAka2V5ID0gJENoYW5nZWQ7CgkJCQlteSBAa2V5cyA9IHNwbGl0ICc6OicsICRrZXk7CgoJCQkJbXkgJGk9MDsKCQkJCWZvciBteSAkayAoQGtleXMpewoJCQkJCSRpKys7CgkJCQkJaWYoJGkgJSAyKXsKCQkJCQkJJGhrLj0iLT57JGt9IjsKCQkJCQl9IGVsc2UgewoJCQkJCQkkaGsuPSItPlska10iOwoJCQkJCX0KCQkJCX0KCQkJCSRoaz0nJENvbmZpZ0l0ZW0tPntYTUxEYXRhfS0+WzFdLT57VmVyc2lvbn0tPlsxXScuJGhrLictPntDb250ZW50fSA9ICROZXdWYWx1ZTsnOwoJCQl9IGVsc2UgewojCQkJCWlmICgkQ2hhbmdlZCBlcSAnQ3VyRGVwbFN0YXRlJykgewojCQkJCQkkQ2hhbmdlZCA9ICdEZXBsU3RhdGVJRCc7CiMJCQkJfQoJCQkJJGhrPSckQ29uZmlnSXRlbS0+e1wnJy4kQ2hhbmdlZC4nXCd9ID0gJE5ld1ZhbHVlOyc7CgkJCX0KCgkJCWV2YWwoJGhrKTsKCgkJCSMgYWRkIGEgbmV3IHZlcnNpb24gd2l0aCB0aGUgbncgaW5jaWRlbnQgc3RhdGUKCQkJbXkgJFZlcnNpb25JRCA9ICRLZXJuZWw6Ok9NLT5HZXQoIktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbSIpLT5WZXJzaW9uQWRkKAoJCQkJJXskQ29uZmlnSXRlbX0sCgoJCQkJVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKCQkJKTsKCgkJCWlmKCEkVmVyc2lvbklEKXsKCQkJCSMgU2UgZXJybwoJCQkJcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCgkJCQkJQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKCQkJCQlDb250ZW50ICAgICA9PiAnJywKCQkJCQlUeXBlICAgICAgICA9PiAnaW5saW5lJywKCQkJCQlOb0NhY2hlICAgICA9PiAxLAoJCQkJKTsKCQkJfQoKCQkjIFNlIHN1Y2Vzc28JCgkJbXkgJVJlc3BvbnNlID0gKAoJCQlTdWNjZXNzZnVsID0+ICdvaycKCQkpOwoJCW15ICRKU09OID0gJExheW91dE9iamVjdC0+SlNPTkVuY29kZSgKCQkgICAgRGF0YSA9PiBcJVJlc3BvbnNlLAoJCSk7CgkJcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCgkJICAgIENvbnRlbnRUeXBlID0+ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PScgLiAkTGF5b3V0T2JqZWN0LT57Q2hhcnNldH0sCgkJICAgIENvbnRlbnQgICAgID0+ICRKU09OLAoJCSAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKCQkgICAgTm9DYWNoZSAgICAgPT4gMSwKCQkpOwogICAgfQp9CgoxOwo=</File>
        <File Location="var/httpd/htdocs/js/thirdparty/tableedit/jquery.tabledit.min.js" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>